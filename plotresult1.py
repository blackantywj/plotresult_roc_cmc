import matplotlib.pyplot as plt
import numpy as np
import sklearn.metrics as sm
def plot_roc(labels, predict, label1, predict1):
    # a = np.loadtxt('fd.txt', dtype=np.float64)
    # b = np.hsplit(a, 2)
    # fp_3 = b[0].squeeze(1)
    # tp_3 = b[1].squeeze(1)
    # fp_3.sort()
    # tp_3.sort()
    a1 = np.loadtxt('D:\\Program Files (x86)\\GetData\\output\\gmgs.txt', dtype=np.float64)
    b1 = np.hsplit(a1, 2)
    fp_4 = b1[0].squeeze(1)
    tp_4 = b1[1].squeeze(1)
    fp_4.sort()
    tp_4.sort()
    # preds_kin1 = np.loadtxt('./gmgs_result_pred.txt', dtype=np.float32)
    # labels_kin1 = np.loadtxt('./gmgs_result_label.txt', dtype=np.float32)
    # roc_auc3 = sm.auc(fp_3, tp_3)
    # roc_auc4 = sm.auc(fp_4, tp_4)
    # tpr2 = np.loadtxt('./fd/fc7/5/tpr.csv', dtype=np.float32)
    # fpr2 = np.loadtxt('./fd/fc7/5/fpr.csv', dtype=np.float32
    # fp_4, tp_4, thres = sm.roc_curve(labels_kin1, preds_kin1)
    roc_auc4 = sm.auc(fp_4, tp_4)
    fpr, tpr, thres = sm.roc_curve(labels, predict)
    roc_auc = sm.auc(fpr, tpr)
    # roc_auc2 = sm.auc(fpr2, tpr2)
    fpr1, tpr1, thres1 = sm.roc_curve(label1, predict1)
    roc_auc1 = sm.auc(fpr1, tpr1)
    plt.title('FIW(GM-GS)')
    plt.plot(fp_4, tp_4, 'b', label='IAFL+FWM = %0.4f' % roc_auc4)
    plt.plot(fpr, tpr, 'r', label='IAFL+FWM (non-adversarial) = %0.4f' % roc_auc)
    plt.plot(fpr1, tpr1, 'g', label='IAFL = %0.4f' % roc_auc1)
    # plt.plot(fpr2, tpr2, 'y', label='VGGFace = %0.4f' % roc_auc2)
    # plt.plot(fp_3, tp_3, 'r', label= 'SphereFace = %0.4f' % roc_auc3)
    plt.legend(loc='lower right')
    plt.plot([0, 1], [0, 1], 'k--')
    plt.ylabel('true positive recognition')
    plt.xlabel('false positive recognition')
    # plt.show()
    plt.savefig('./gmgs_ad.svg', format='svg')
    return 1

preds_kin = np.loadtxt('./kin/gmgs_result_pred.txt', dtype=np.float32)
labels_kin = np.loadtxt('./kin/gmgs_result_label.txt', dtype=np.float32)
pred_ed = np.loadtxt('./de/gmgs_result_pred.txt', dtype=np.float32)
labels_ed = np.loadtxt('./de/gmgs_result_label.txt', dtype=np.float32)

plot_roc(labels_kin, preds_kin, labels_ed, pred_ed)

# print(a1, a1)
# b1 = np.loadtxt('1y.txt', dtype=np.float32)
# a2 = np.loadtxt('2x.txt', dtype=np.float32)
# b2 = np.loadtxt('2y.txt', dtype=np.float32)
# a3 = np.loadtxt('3x.txt', dtype=np.float32)
# b3 = np.loadtxt('3y.txt', dtype=np.float32)
# a4 = np.loadtxt('4x.txt', dtype=np.float32)
# b4 = np.loadtxt('4y.txt', dtype=np.float32)
# a5 = np.loadtxt('5x.txt', dtype=np.float32)
# b5 = np.loadtxt('5y.txt', dtype=np.float32)
# a6 = np.loadtxt('6x.txt', dtype=np.float32)
# b6 = np.loadtxt('6y.txt', dtype=np.float32)
# a7 = np.loadtxt('7x.txt', dtype=np.float32)
# b7 = np.loadtxt('7y.txt', dtype=np.float32)
# a8 = np.loadtxt('8x.txt', dtype=np.float32)
# b8 = np.loadtxt('8y.txt', dtype=np.float32)
# fpr, tpr, thres = sm.roc_curve(labels, predict)
# roc_auc = sm.auc(fpr, tpr)
# roc_auc_o1 = sm.auc(a1, b1)
# roc_auc_o2 = sm.auc(a2, b2)
# roc_auc_o3 = sm.auc(a3, b3)
# roc_auc_o4 = sm.auc(a4, b4)
# roc_auc_o5 = sm.auc(a5, b5)
# roc_auc_o6 = sm.auc(a6, b6)
# roc_auc_o7 = sm.auc(a7, b7)
# roc_auc_o8 = sm.auc(a8, b8)
# plt.title('KinFaceW-I(M-D)')
# plt.plot(fpr, tpr, 'b', label='Ours = %0.4f' % roc_auc)
# plt.plot(a1, b1, 'r', label='ULPGC = %0.4f' % roc_auc_o1)
# plt.plot(a2, b2, 'y', label='Polito  = %0.4f' % roc_auc_o2)
# # plt.plot(a3, b3, 'c', label='LIRIS  = %0.4f' % roc_auc_o3)
# # plt.plot(a4, b4, 'm', label='AUC = %0.4f' % roc_auc_o4)
# plt.plot(a5, b5, 'g', label='BIU(HOG) = %0.4f' % roc_auc_o5)
# plt.plot(a6, b6, 'k', label='BIU(LBP) = %0.4f' % roc_auc_o6)
# plt.plot(a7, b7, 'gold', label='SILD(HOG) = %0.4f' % roc_auc_o7)
# plt.plot(a8, b8, 'pink', label='SILD(LBP) = %0.4f' % roc_auc_o8)
#
# plt.legend(loc='lower right')
# plt.plot([0, 1], [0, 1], 'r--')
# plt.ylabel('true positive rate')
# plt.xlabel('false positive rate')
# plt.savefig('./md.svg', format='svg')
# plt.show()
